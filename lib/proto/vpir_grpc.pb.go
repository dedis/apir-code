// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: vpir.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VPIR_DatabaseInfo_FullMethodName = "/proto.VPIR/DatabaseInfo"
	VPIR_Query_FullMethodName        = "/proto.VPIR/Query"
)

// VPIRClient is the client API for VPIR service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VPIRClient interface {
	DatabaseInfo(ctx context.Context, in *DatabaseInfoRequest, opts ...grpc.CallOption) (*DatabaseInfoResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
}

type vPIRClient struct {
	cc grpc.ClientConnInterface
}

func NewVPIRClient(cc grpc.ClientConnInterface) VPIRClient {
	return &vPIRClient{cc}
}

func (c *vPIRClient) DatabaseInfo(ctx context.Context, in *DatabaseInfoRequest, opts ...grpc.CallOption) (*DatabaseInfoResponse, error) {
	out := new(DatabaseInfoResponse)
	err := c.cc.Invoke(ctx, VPIR_DatabaseInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPIRClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, VPIR_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VPIRServer is the server API for VPIR service.
// All implementations must embed UnimplementedVPIRServer
// for forward compatibility
type VPIRServer interface {
	DatabaseInfo(context.Context, *DatabaseInfoRequest) (*DatabaseInfoResponse, error)
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	mustEmbedUnimplementedVPIRServer()
}

// UnimplementedVPIRServer must be embedded to have forward compatible implementations.
type UnimplementedVPIRServer struct {
}

func (UnimplementedVPIRServer) DatabaseInfo(context.Context, *DatabaseInfoRequest) (*DatabaseInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseInfo not implemented")
}
func (UnimplementedVPIRServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedVPIRServer) mustEmbedUnimplementedVPIRServer() {}

// UnsafeVPIRServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VPIRServer will
// result in compilation errors.
type UnsafeVPIRServer interface {
	mustEmbedUnimplementedVPIRServer()
}

func RegisterVPIRServer(s grpc.ServiceRegistrar, srv VPIRServer) {
	s.RegisterService(&VPIR_ServiceDesc, srv)
}

func _VPIR_DatabaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPIRServer).DatabaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VPIR_DatabaseInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPIRServer).DatabaseInfo(ctx, req.(*DatabaseInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPIR_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPIRServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VPIR_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPIRServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VPIR_ServiceDesc is the grpc.ServiceDesc for VPIR service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VPIR_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.VPIR",
	HandlerType: (*VPIRServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DatabaseInfo",
			Handler:    _VPIR_DatabaseInfo_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _VPIR_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vpir.proto",
}
