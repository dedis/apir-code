package utils

import (
	"crypto/tls"
	"crypto/x509"
	"errors"
	"log"

	"google.golang.org/grpc/credentials"
)

// WARNING: DO NOT USE THESE KEYS IN PRODUCTION!

var ServerPublicKeys = [...]string{
	`-----BEGIN CERTIFICATE-----
MIIDXjCCAcagAwIBAgIQaQ6ZT/eUnVj3yI0zDmu1zDANBgkqhkiG9w0BAQsFADBl
MR4wHAYDVQQKExVta2NlcnQgZGV2ZWxvcG1lbnQgQ0ExHTAbBgNVBAsMFHNtc2Nv
bG9tQGRlZGlzMjAwMjA0MSQwIgYDVQQDDBtta2NlcnQgc21zY29sb21AZGVkaXMy
MDAyMDQwHhcNMjQxMDEyMTAzMTE0WhcNMjcwMTEyMTEzMTE0WjBEMScwJQYDVQQK
Ex5ta2NlcnQgZGV2ZWxvcG1lbnQgY2VydGlmaWNhdGUxGTAXBgNVBAsMEHNtc2Nv
bG9tQGRlZGlzcGMwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAARFOsBHZVaVxg3l
pIxFyzdB8wt+xDB1GOlBYG4ODWvDLWiYfcgcBCQeuhgA2CVGBYqBj7vabgIRMQuA
OPMnlKdoo3YwdDAOBgNVHQ8BAf8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUHAwEw
HwYDVR0jBBgwFoAUUeNK2y7qWXtNSX1IOwGgvcLIz0wwLAYDVR0RBCUwI4IJbG9j
YWxob3N0hwR/AAABhxAAAAAAAAAAAAAAAAAAAAABMA0GCSqGSIb3DQEBCwUAA4IB
gQCaqdG3+9RlY0EzFgAUXgPwIURehGfP7GzpO92yirRI2eW+spqjZU6RCU3O8THv
1VrzKZ9Y1Pr7uyzHFDR13vlwUwtsyxsXKZibxNRMfLQB8+NUD7N0gdsNQXogxfnx
AbYmRNXLEiasqy43YXwkG4PQoVpyhg2FnsvmYT1MG+vnNXdVxIxT2o6QG2mZyqQA
ro2aKUgAhELSvhj3MknAtjS6mBodvDWonpJASSwd0k2SUkJhAR1ZFO7LhTA19ngo
IcugjTWHigrIGqgC0zTPFZ0hkLk2XAohbAYmDq/rkcP+tlSHzX/Kpj22WuJqNqV/
nTsgO9cEnUpoOZZj04f8o5GmTRdahcoat8g5dH6byjflNMhfaVc8xjnxKFS4hmxS
dznyZ+snVAESTHnmwP0ESHAoCTWJ2ZfTBdD3eYX8XDvHrg/WNHZ4Kga/xay4mIne
bAcmEWStF7BK86q5KJ0XwOaAE/y852/8x1tjAFv7WlUGATcomufYeh2XG9SBLKYd
lmY=
-----END CERTIFICATE-----`,

	`-----BEGIN CERTIFICATE-----
MIIDXzCCAcegAwIBAgIRAK1HOSv/5MtDaGYz9ScwHswwDQYJKoZIhvcNAQELBQAw
ZTEeMBwGA1UEChMVbWtjZXJ0IGRldmVsb3BtZW50IENBMR0wGwYDVQQLDBRzbXNj
b2xvbUBkZWRpczIwMDIwNDEkMCIGA1UEAwwbbWtjZXJ0IHNtc2NvbG9tQGRlZGlz
MjAwMjA0MB4XDTI0MTAxMjEwMzEyMloXDTI3MDExMjExMzEyMlowRDEnMCUGA1UE
ChMebWtjZXJ0IGRldmVsb3BtZW50IGNlcnRpZmljYXRlMRkwFwYDVQQLDBBzbXNj
b2xvbUBkZWRpc3BjMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEvwQL4X3c5p4w
Xlj2mPQ1Lg8eh/KZ5YqN3LJfxyb83jdMTKFK9hq6R94u9r/7esZCH+BtOWhYWLUF
k3RPgykjRKN2MHQwDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMB
MB8GA1UdIwQYMBaAFFHjStsu6ll7TUl9SDsBoL3CyM9MMCwGA1UdEQQlMCOCCWxv
Y2FsaG9zdIcEfwAAAYcQAAAAAAAAAAAAAAAAAAAAATANBgkqhkiG9w0BAQsFAAOC
AYEAqQmtAXyq12sdRTGjwIaqfUXWQi9tWB2Ow8CJd5EQLM21A/28OSj99wWAVHf1
4SjVgZilmBep8IV3lPk2sDPXWnEKxXVOAY+7Yae02AnysQ9QNNkk11AeOnPtDRdJ
27jOXeN51S/PM1UMv0EyzC5HyQB3i9UNj0zWGtw1L3PpbzEILVse/UHYla6TR/sS
u0X/h7K885TdxBtmaKdmunNBQU8IaFV6TQ65PNjsmVTTVUTaKJmZ0VyN02zYLPZe
YjQJbnU5TocZpA443YFaobXDLLd1WvBKX4ZbsdzLDMLK2z4IGwmb740Cq/6ipgsr
GvlGy1sUoDgROw636klVsrQIcvP7wh54BT4tyEGaAdAJSujUQ/9ngSSIzuBkB46y
x9JCUZlCggknEfgddiq9/jhFNNdOfF1MMn7Z/Pw7BLjV3kmVgIiS0JVXrsyI47Nw
w5iGkrXP7XsVqt3aQIM1auqIFYpD+w7rFNvMgFGHYE8+uvLuqx2pfFAJnbHHnegQ
jQpX
-----END CERTIFICATE-----`,

	`-----BEGIN CERTIFICATE-----
MIIDXzCCAcegAwIBAgIRAL7Kujfh274p7iv0rllHiqQwDQYJKoZIhvcNAQELBQAw
ZTEeMBwGA1UEChMVbWtjZXJ0IGRldmVsb3BtZW50IENBMR0wGwYDVQQLDBRzbXNj
b2xvbUBkZWRpczIwMDIwNDEkMCIGA1UEAwwbbWtjZXJ0IHNtc2NvbG9tQGRlZGlz
MjAwMjA0MB4XDTI0MTAxMjEwMzEzMFoXDTI3MDExMjExMzEzMFowRDEnMCUGA1UE
ChMebWtjZXJ0IGRldmVsb3BtZW50IGNlcnRpZmljYXRlMRkwFwYDVQQLDBBzbXNj
b2xvbUBkZWRpc3BjMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEsIRBXho07noN
/nu8X9mUgNBLhhARVAioyHifkLoCrQK/6L8KJMEKkmSyLbqwrxCGqgD1lUDWO8Rc
68Ud4Ctr9aN2MHQwDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMB
MB8GA1UdIwQYMBaAFFHjStsu6ll7TUl9SDsBoL3CyM9MMCwGA1UdEQQlMCOCCWxv
Y2FsaG9zdIcEfwAAAYcQAAAAAAAAAAAAAAAAAAAAATANBgkqhkiG9w0BAQsFAAOC
AYEAJPHPC19jcAAeHcQ5Jo6mq5eE2CkBwGzzDeKETm037GZDeF0PsQ71IKY0/ckF
Kt07hekhipMY5Zs/A3DikU1DmyA65xZF9a665mFLVDCsfk5u8vO6riWEqEEqN8TV
4quyq0WoVOnZJ2PzOUlZnzuri6XJZHKnrL/KZYkVmETe5XMQ/ySK2Xa/FKN7GAtZ
D0SrTE9gW7ElF0k5MARTe7xkb4JE6XZAqM2SGarjWGYxYE7b4TwJqjuvQ+Uv4UlV
rMb+dwK4YQ9TR7Xu2NmzPnBU+T6IpOSVnqyFJDievShKA8VtjnxYo8rOTwJyHM0O
9xt8d7GJypVapDam6BMBc2u+1GZcrU/B1Q8cNcFiwX9UFVOCUzkDQB7tHpZUNzpY
Q6ZqqG3gYDON8YffVWEHjfellQJtVkTy5bp4zjtUl7O5+pPgXW6I25cONqJRDZBg
InbLWsYFCAeXiD6wWTiru3BQs16lTzBeuYw8DfKZbRsLD0dOWwBo+FvbkPgxz3Ln
5vIL
-----END CERTIFICATE-----`,

	`-----BEGIN CERTIFICATE-----
MIIDXjCCAcagAwIBAgIQJNaBt8xAofmLgfFk3xddDTANBgkqhkiG9w0BAQsFADBl
MR4wHAYDVQQKExVta2NlcnQgZGV2ZWxvcG1lbnQgQ0ExHTAbBgNVBAsMFHNtc2Nv
bG9tQGRlZGlzMjAwMjA0MSQwIgYDVQQDDBtta2NlcnQgc21zY29sb21AZGVkaXMy
MDAyMDQwHhcNMjQxMDEyMTAzMTM3WhcNMjcwMTEyMTEzMTM3WjBEMScwJQYDVQQK
Ex5ta2NlcnQgZGV2ZWxvcG1lbnQgY2VydGlmaWNhdGUxGTAXBgNVBAsMEHNtc2Nv
bG9tQGRlZGlzcGMwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASCjnCXs0D3Gw3+
iRHeU5b/RwlzIPiDdR3yDtziPzNMY8tZBE3fRxFiPtHycIO6Yh4OBqJKfUgzackl
00WPCFrqo3YwdDAOBgNVHQ8BAf8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUHAwEw
HwYDVR0jBBgwFoAUUeNK2y7qWXtNSX1IOwGgvcLIz0wwLAYDVR0RBCUwI4IJbG9j
YWxob3N0hwR/AAABhxAAAAAAAAAAAAAAAAAAAAABMA0GCSqGSIb3DQEBCwUAA4IB
gQCAk14Y5pPjIVUE4jONQ8D5CknVeojm6VWOdjEJ1xl7uiSXEGdOKGiLTmvd7uq3
alS/ky87PFpdHLMp3GrIMipL4Cu56Z5WawXpnbHkqehxypxcj1QFywCxmRenMGWC
9pacz1pwQMW7ya0cQyp98uW3WwkjQIsxeAUxO7BlMmeb/lvETA00OHx1H0oWYj6m
59k7O9BmfFbYzxOguByt70eSIE4IHrBpLbV3aZp19BgdIXh8tr9HopDEzs10ca3K
YjqLehdN9NAgomjTNDlxWBpkEssstNLzkQAheoUdVxD+/HNlYtGegbfKjltMdvWV
msjp4mm9xtnqd9sMJZ2ufsCD74QrEsF1gS6dLu7wPUBz3rsXzVjRjmQ7MPeja2gS
rHKl+6wYI1pxVoCCwNXkLOSs/sLvJ083yg+mv0VFldTjEcrQzNaZPLFrr3uQSvJx
yP7cuOtf5BMJyJmsWQSQTOsUKYIlFKayjuekXmWqqsyHXNofZQbtaVAc7VZK0Lu5
TTI=
-----END CERTIFICATE-----`,

	`-----BEGIN CERTIFICATE-----
MIIDXjCCAcagAwIBAgIQYPUJQnLRjscwiKPt7XRlgDANBgkqhkiG9w0BAQsFADBl
MR4wHAYDVQQKExVta2NlcnQgZGV2ZWxvcG1lbnQgQ0ExHTAbBgNVBAsMFHNtc2Nv
bG9tQGRlZGlzMjAwMjA0MSQwIgYDVQQDDBtta2NlcnQgc21zY29sb21AZGVkaXMy
MDAyMDQwHhcNMjQxMDEyMTAzMTQ1WhcNMjcwMTEyMTEzMTQ1WjBEMScwJQYDVQQK
Ex5ta2NlcnQgZGV2ZWxvcG1lbnQgY2VydGlmaWNhdGUxGTAXBgNVBAsMEHNtc2Nv
bG9tQGRlZGlzcGMwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQZOF+0AyiK7k10
TCE9WrCG43M53fUkIS25uWzOhvWxGgedLoArZwXplBdYYpB3Bla7HOOqcq30iYk2
BO1GVzjHo3YwdDAOBgNVHQ8BAf8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUHAwEw
HwYDVR0jBBgwFoAUUeNK2y7qWXtNSX1IOwGgvcLIz0wwLAYDVR0RBCUwI4IJbG9j
YWxob3N0hwR/AAABhxAAAAAAAAAAAAAAAAAAAAABMA0GCSqGSIb3DQEBCwUAA4IB
gQCPvIGz+sU6EE08rrI+hjjEVTijw2NoJOeKp+5YlUtD1k6tEAaYd4ULzI2vTpXN
c9di0jbJ6nnOVPbseCDRz2xQyD2twk+wbZV9cQDeql/38Re8WOv02BVXKOB7Ume5
xYMzSGJGA2zaSMPfO9NmhKaTTbEkyJJRg2LOFjvSCRCg7BJqbrpQJ24DCFfx/WaG
SIrU3HFCk8M4SMmBci6jgMCnSkTiV72ONFsjHVDw9EaiPdfqKYT9quH7gKK4iXXu
wVwvOivz3a0WWpzBWrrtsMbGCsIPbYuDP0a7pwlKCfvv894nTblbXpAYmnjgTK39
Sy70Ugfx/DG/8enWYX17kDrqL38zpXZk/qul1nJn96P0Hue5xe00Qquw7rHeFsuT
9neYS36PYuCcf0yx4ADe2wNu4XirB0pwf+VpvRL7bbi/err31JAY6kUu90L2liWR
KQPTGlp0i+G5sEwqPbjT0FTmXDNEYZx4fykmiBEDe27Tyjsx3LSXXgJjk5gSx0kE
pPY=
-----END CERTIFICATE-----`,
}

var serverSecretKeys = [...]string{
	`-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgNoDZwvdS/ScB/Z7m
sdCAXt2u4L9prHBXNiNCa10IYLmhRANCAARFOsBHZVaVxg3lpIxFyzdB8wt+xDB1
GOlBYG4ODWvDLWiYfcgcBCQeuhgA2CVGBYqBj7vabgIRMQuAOPMnlKdo
-----END PRIVATE KEY-----`,

	`-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgIgGbBHOEdUqLDkc5
8mJ5PQcgB872WDdRWtQKm4cB7JihRANCAAS/BAvhfdzmnjBeWPaY9DUuDx6H8pnl
io3csl/HJvzeN0xMoUr2GrpH3i72v/t6xkIf4G05aFhYtQWTdE+DKSNE
-----END PRIVATE KEY-----`,

	`-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgWBwLH3AqXx5Znx4/
0FteACwe5tjn80izrSVCcHumfY+hRANCAASwhEFeGjTueg3+e7xf2ZSA0EuGEBFU
CKjIeJ+QugKtAr/ovwokwQqSZLIturCvEIaqAPWVQNY7xFzrxR3gK2v1
-----END PRIVATE KEY-----`,

	`-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgsNPka1QqZoiyELQl
LAz4+WNHHRsDYssTR9yT19XdyeOhRANCAASCjnCXs0D3Gw3+iRHeU5b/RwlzIPiD
dR3yDtziPzNMY8tZBE3fRxFiPtHycIO6Yh4OBqJKfUgzackl00WPCFrq
-----END PRIVATE KEY-----`,

	`-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgcHIFHgufO4VJc8ZZ
Jh6VTiwmJE7cfF2K0d5MIsOS8GehRANCAAQZOF+0AyiK7k10TCE9WrCG43M53fUk
IS25uWzOhvWxGgedLoArZwXplBdYYpB3Bla7HOOqcq30iYk2BO1GVzjH
-----END PRIVATE KEY-----`,
}

// ServerCertificates holds the certificates for the servers
var ServerCertificates []tls.Certificate

func init() {
	numServers := 5

	ServerCertificates = make([]tls.Certificate, numServers)

	var err error
	for i := range ServerCertificates {
		ServerCertificates[i], err = tls.X509KeyPair(
			[]byte(ServerPublicKeys[i]),
			[]byte(serverSecretKeys[i]))
		if err != nil {
			log.Fatalf("could not load certficate #%v %v", i, err)
		}
	}
}

func LoadServersCertificates() (credentials.TransportCredentials, error) {
	cp := x509.NewCertPool()
	for _, cert := range ServerPublicKeys {
		if !cp.AppendCertsFromPEM([]byte(cert)) {
			return nil, errors.New("credentials: failed to append certificates")
		}
	}
	creds := credentials.NewClientTLSFromCert(cp, "127.0.0.1")

	return creds, nil
}
